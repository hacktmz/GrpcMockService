// Code generated by protoc-gen-go. DO NOT EDIT.
// source: hello.proto

/*
Package hello is a generated protocol buffer package.

It is generated from these files:
	hello.proto

It has these top-level messages:
	HelloRequest
	HelloResponse
	EmptyMsg
*/
package hello

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// HelloRequest 请求结构
type HelloRequest struct {
	Id   int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *HelloRequest) Reset()                    { *m = HelloRequest{} }
func (m *HelloRequest) String() string            { return proto.CompactTextString(m) }
func (*HelloRequest) ProtoMessage()               {}
func (*HelloRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *HelloRequest) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *HelloRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// HelloResponse 响应结构
type HelloResponse struct {
	// bytes voice    = 1;
	Message string            `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
	Options map[string]string `protobuf:"bytes,2,rep,name=options" json:"options,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *HelloResponse) Reset()                    { *m = HelloResponse{} }
func (m *HelloResponse) String() string            { return proto.CompactTextString(m) }
func (*HelloResponse) ProtoMessage()               {}
func (*HelloResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *HelloResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *HelloResponse) GetOptions() map[string]string {
	if m != nil {
		return m.Options
	}
	return nil
}

type EmptyMsg struct {
}

func (m *EmptyMsg) Reset()                    { *m = EmptyMsg{} }
func (m *EmptyMsg) String() string            { return proto.CompactTextString(m) }
func (*EmptyMsg) ProtoMessage()               {}
func (*EmptyMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func init() {
	proto.RegisterType((*HelloRequest)(nil), "rokid.inner.HelloRequest")
	proto.RegisterType((*HelloResponse)(nil), "rokid.inner.HelloResponse")
	proto.RegisterType((*EmptyMsg)(nil), "rokid.inner.EmptyMsg")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Hello service

type HelloClient interface {
	// 定义SayHello方法
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error)
}

type helloClient struct {
	cc *grpc.ClientConn
}

func NewHelloClient(cc *grpc.ClientConn) HelloClient {
	return &helloClient{cc}
}

func (c *helloClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error) {
	out := new(HelloResponse)
	err := grpc.Invoke(ctx, "/rokid.inner.Hello/SayHello", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Hello service

type HelloServer interface {
	// 定义SayHello方法
	SayHello(context.Context, *HelloRequest) (*HelloResponse, error)
}

func RegisterHelloServer(s *grpc.Server, srv HelloServer) {
	s.RegisterService(&_Hello_serviceDesc, srv)
}

func _Hello_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rokid.inner.Hello/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Hello_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rokid.inner.Hello",
	HandlerType: (*HelloServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _Hello_SayHello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hello.proto",
}

// Client API for Hello2 service

type Hello2Client interface {
	// 定义SayHello方法
	SayHello2(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error)
}

type hello2Client struct {
	cc *grpc.ClientConn
}

func NewHello2Client(cc *grpc.ClientConn) Hello2Client {
	return &hello2Client{cc}
}

func (c *hello2Client) SayHello2(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error) {
	out := new(HelloResponse)
	err := grpc.Invoke(ctx, "/rokid.inner.Hello2/SayHello2", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Hello2 service

type Hello2Server interface {
	// 定义SayHello方法
	SayHello2(context.Context, *HelloRequest) (*HelloResponse, error)
}

func RegisterHello2Server(s *grpc.Server, srv Hello2Server) {
	s.RegisterService(&_Hello2_serviceDesc, srv)
}

func _Hello2_SayHello2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Hello2Server).SayHello2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rokid.inner.Hello2/SayHello2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Hello2Server).SayHello2(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Hello2_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rokid.inner.Hello2",
	HandlerType: (*Hello2Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello2",
			Handler:    _Hello2_SayHello2_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hello.proto",
}

func init() { proto.RegisterFile("hello.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 261 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x51, 0x3b, 0x4f, 0xc3, 0x30,
	0x10, 0xc6, 0x2e, 0x69, 0x9a, 0x4b, 0x41, 0xe8, 0xc4, 0x10, 0x32, 0x45, 0x59, 0xc8, 0xe4, 0xc1,
	0x2c, 0xa8, 0x1b, 0x8f, 0x4a, 0x0c, 0x3c, 0x24, 0xb3, 0xb1, 0x05, 0xc5, 0x2a, 0x56, 0x13, 0x3b,
	0xc4, 0x2e, 0x52, 0xfe, 0x11, 0x3f, 0x13, 0xd5, 0x69, 0xa4, 0x22, 0xc1, 0xd2, 0xed, 0x3b, 0x9f,
	0xbf, 0x87, 0xee, 0x83, 0xf8, 0x43, 0xd6, 0xb5, 0x61, 0x6d, 0x67, 0x9c, 0xc1, 0xb8, 0x33, 0x6b,
	0x55, 0x31, 0xa5, 0xb5, 0xec, 0x72, 0x0e, 0xf3, 0x87, 0xed, 0x4e, 0xc8, 0xcf, 0x8d, 0xb4, 0x0e,
	0x4f, 0x81, 0xaa, 0x2a, 0x21, 0x19, 0x29, 0x02, 0x41, 0x55, 0x85, 0x08, 0xc7, 0xba, 0x6c, 0x64,
	0x42, 0x33, 0x52, 0x44, 0xc2, 0xe3, 0xfc, 0x9b, 0xc0, 0xc9, 0x8e, 0x64, 0x5b, 0xa3, 0xad, 0xc4,
	0x04, 0xc2, 0x46, 0x5a, 0x5b, 0xae, 0xa4, 0xa7, 0x46, 0x62, 0x1c, 0xf1, 0x06, 0x42, 0xd3, 0x3a,
	0x65, 0xb4, 0x4d, 0x68, 0x36, 0x29, 0x62, 0x7e, 0xc9, 0xf6, 0xec, 0xd9, 0x2f, 0x19, 0xf6, 0x32,
	0xfc, 0x5c, 0x6a, 0xd7, 0xf5, 0x62, 0xe4, 0xa5, 0x0b, 0x98, 0xef, 0x2f, 0xf0, 0x0c, 0x26, 0x6b,
	0xd9, 0xef, 0x8c, 0xb6, 0x10, 0xcf, 0x21, 0xf8, 0x2a, 0xeb, 0xcd, 0x98, 0x72, 0x18, 0x16, 0xf4,
	0x9a, 0xe4, 0x00, 0xb3, 0x65, 0xd3, 0xba, 0xfe, 0xc9, 0xae, 0xf8, 0x23, 0x04, 0xde, 0x0e, 0xef,
	0x60, 0xf6, 0x5a, 0xf6, 0x03, 0xbe, 0xf8, 0x2b, 0x8e, 0x3f, 0x45, 0x9a, 0xfe, 0x9f, 0x34, 0x3f,
	0xe2, 0xcf, 0x30, 0xf5, 0x4f, 0x1c, 0xef, 0x21, 0x1a, 0xe5, 0xf8, 0xc1, 0x7a, 0xb7, 0xe1, 0x5b,
	0xe0, 0x4b, 0x7a, 0x9f, 0xfa, 0x96, 0xae, 0x7e, 0x02, 0x00, 0x00, 0xff, 0xff, 0xb9, 0x9f, 0xfe,
	0x33, 0xb4, 0x01, 0x00, 0x00,
}
